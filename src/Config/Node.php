<?php
//*****************************************************************************
//*****************************************************************************
/**
 * Node Config Class
 *
 * @package         Cclark61\RPi\WS2812
 * @subpackage         Config
 * @author          Christian J. Clark
 * @copyright       Christian J. Clark
 * @link            https://github.com/cclark61/php-rpi-ws2812
 **/
//*****************************************************************************
//*****************************************************************************

namespace Cclark61\RPi\WS2812\Config;

class Node
{
    //=========================================================================
    //=========================================================================
    // Get Config
    //=========================================================================
    //=========================================================================
    public static function GetConfig($args)
    {
        //---------------------------------------------------------------------
        // Config Empty?
        //---------------------------------------------------------------------
        if (!$args) {
            return static::DefaultConfig();
        }

        //---------------------------------------------------------------------
        // Config is an array
        //---------------------------------------------------------------------
        if (is_array($args)) {
            $config = static::ValidateConfig(static::DefaultConfig($args));
        }
        //---------------------------------------------------------------------
        // Config index given
        //---------------------------------------------------------------------
        else {
            $index = $args;
            $app_config = new \phpOpenFW\Core\AppConfig();
            if (empty($app_config->nodes[$index])) {
                if ($index == 'default') {
                    return static::DefaultConfig();
                }
                else {
                    die("[!!] Invalid configuration index.\n");
                }
            }
            $config = static::ValidateConfig(static::DefaultConfig($app_config->nodes[$index]));
        }

        //---------------------------------------------------------------------
        // Config Transformations
        //---------------------------------------------------------------------
        $config['chip_type'] = strtolower($config['chip_type']);

        //---------------------------------------------------------------------
        // Return Config
        //---------------------------------------------------------------------
        return $config;
    }

    //=========================================================================
    //=========================================================================
    // Validate Config
    //=========================================================================
    //=========================================================================
    public static function ValidateConfig(Array $args)
    {
        //---------------------------------------------------------------------
        // Check that config is an array
        //---------------------------------------------------------------------
        if (!is_array($args)) {
            die("[!!] Node configuration must be an array.\n");
        }
        $config = $args;

        //---------------------------------------------------------------------
        // GPIO Pin Number
        //---------------------------------------------------------------------
        if (empty($config['gpionum'])) {
            die("[!!] Node GPIO pin number (gpionum) not specified.\n");
        }

        //---------------------------------------------------------------------
        // Check Chip Type
        //---------------------------------------------------------------------
        $valid_chip_types = ['ws2812', 'sk6812', 'sk9822'];
        if (empty($config['chip_type'])) {
            die("[!!] Node chip type (chip_type) not specified.\n");
        }
        else if (!in_array($config['chip_type'], $valid_chip_types)) {
            $str_valid_chips = implode(', ' , $valid_chip_types);
            die("[!!] Invalid node chip type specified. Valid values are: {$str_valid_chips}.\n");
        }

        //---------------------------------------------------------------------
        // Check Host
        //---------------------------------------------------------------------
        if (empty($config['host'])) {
            die("[!!] Node host (host) not specified.\n");
        }

        //---------------------------------------------------------------------
        // Check Port
        //---------------------------------------------------------------------
        if (empty($config['port'])) {
            die("[!!] Node port (port) not specified.\n");
        }

        //---------------------------------------------------------------------
        // Check Channel
        //---------------------------------------------------------------------
        if (empty($config['channel'])) {
            die("[!!] Node channel (channel) not specified.\n");
        }

        //---------------------------------------------------------------------
        // Check number of LEDs
        //---------------------------------------------------------------------
        if (empty($config['num_leds'])) {
            die("[!!] Number of LEDs (num_leds) in the node was not specified.\n");
        }

        //---------------------------------------------------------------------
        // Return Config
        //---------------------------------------------------------------------
        return $config;
    }

    //=========================================================================
    //=========================================================================
    // Validate Config
    //=========================================================================
    //=========================================================================
    public static function DefaultConfig(Array $args=[])
    {
        //---------------------------------------------------------------------
        // Set Default Config
        //---------------------------------------------------------------------
        $config = [
            'index' => 'default',
            'gpionum' => 18,
            'chip_type' => 'ws2812',
            'channel' => 1,
            'host' => '127.0.0.1',
            'port' => 9999,
            'num_leds' => 10
        ];

        //---------------------------------------------------------------------
        // Override Config Values?
        //---------------------------------------------------------------------
        if ($args) {
            $config = array_merge($config, $args);
        }

        //---------------------------------------------------------------------
        // Return Config
        //---------------------------------------------------------------------
        return $config;
    }

}
