<?php
//*****************************************************************************
//*****************************************************************************
/**
 * WS2812 LED Display Class
 *
 * @package         Cclark61\RPi\WS2812
 * @author          Christian J. Clark
 * @copyright       Christian J. Clark
 * @link            https://github.com/cclark61/php-rpi-ws2812
 **/
//*****************************************************************************
//*****************************************************************************

namespace Cclark61\RPi\WS2812;

class LedDisplay
{
    //=========================================================================
    // Class Members
    //=========================================================================
    protected $led_node = ''; // Empty = default
    protected $led_strip;
    protected $default_color = 'FF0000';
    protected $brightness = 25;
    protected $pixel_buffer = [];
    protected $pixel_count = 0;

    //=========================================================================
    //=========================================================================
    // Constructor
    //=========================================================================
    //=========================================================================
    public function __construct(Array $args=[])
    {
        //---------------------------------------------------------------------
        // LED Node
        //---------------------------------------------------------------------
        if (!empty($args['led_node'])) {
            $this->led_node = $args['led_node'];
        }

        //---------------------------------------------------------------------
        // Default LED color
        //---------------------------------------------------------------------
        if (!empty($args['default_color'])) {
            $this->default_color = $args['default_color'];
        }

        //---------------------------------------------------------------------
        // Create New LED Strip Object
        //---------------------------------------------------------------------
        $this->led_strip = new \Cclark61\RPi\WS2812\Strip($this->led_node);
        $this->pixel_count = $this->led_strip->GetLEDCount();

        //---------------------------------------------------------------------
        // LED Display Brightness
        //---------------------------------------------------------------------
        if (!empty($args['brightness'])) {
            $this->brightness = $args['brightness'];
        }
        $this->led_strip->Brightness($this->brightness);

        //---------------------------------------------------------------------
        // Clear LED Node?
        //---------------------------------------------------------------------
        if (!empty($args['clear'])) {
            $this->led_strip->Clear();
        }
    }

    //=========================================================================
    //=========================================================================
    // Destructor
    //=========================================================================
    //=========================================================================
    public function __destruct()
    {
        $this->led_strip->Clear();
    }

    //==========================================================================
    //==========================================================================
    // Clear Method
    //==========================================================================
    //==========================================================================
    public function Clear()
    {
        $this->ClearPixelBuffer();
        $this->led_strip->Clear();
    }

    //==========================================================================
    //==========================================================================
    // Add Pixels Method
    //==========================================================================
    //==========================================================================
    public function AddPixels($pixels, Array $args=[])
    {
        //----------------------------------------------------------------------
        // String Passed
        //----------------------------------------------------------------------
        if (is_string($pixels)) {
            if ($pixels == '') {
                return false;
            }
            $pixels = explode('', $pixels);
        }

        //----------------------------------------------------------------------
        // Array of Pixels
        //----------------------------------------------------------------------
        if (is_array($pixels)) {
            foreach ($pixels as $pixel) {
                $this->AddPixel($pixel);
            }
        }

        //----------------------------------------------------------------------
        // Invalid pixels argument
        //----------------------------------------------------------------------
        throw new \Exception('Invalid pixels argument passed.');
    }

    //==========================================================================
    //==========================================================================
    // Add Pixel Method
    //==========================================================================
    //==========================================================================
    public function AddPixel($pixel)
    {
        //----------------------------------------------------------------------
        // Defaults
        //----------------------------------------------------------------------
        $pos = 1;
        $color = $this->default_color;

        //----------------------------------------------------------------------
        // Pixel is an array
        //----------------------------------------------------------------------
        if (is_array($pixel)) {
            if (isset($pixel['pos'])) {
                $pos = (int)$pixel['pos'];
            }
            if (isset($pixel['color'])) {
                $pos = $pixel['color'];
            }
        }
        else if (is_scalar($pixel)) {
            $pos = (int)$pixel;
        }

        //----------------------------------------------------------------------
        // Check for out of range pixel position
        //----------------------------------------------------------------------
        if ($pos <= 0 || $pos > $this->pixel_count) {
            return false;
        }

        //----------------------------------------------------------------------
        // Add pixel to buffer
        //----------------------------------------------------------------------
        $this->pixel_buffer[$pos] = ['pos' => $pos, 'color' => $color];

        //----------------------------------------------------------------------
        // Success
        //----------------------------------------------------------------------
        return true;
    }

    //==========================================================================
    //==========================================================================
    // Remove Pixel Method
    //==========================================================================
    //==========================================================================
    public function RemovePixel($pos)
    {
        if (isset($this->pixel_buffer[$pos])) {
            unset($this->pixel_buffer[$pos]);
            return true;
        }
        return false;
    }

    //==========================================================================
    //==========================================================================
    // Clear Pixel Buffer Method
    //==========================================================================
    //==========================================================================
    public function ClearPixelBuffer()
    {
        $this->pixel_buffer = [];
    }

    //==========================================================================
    //==========================================================================
    // Render Method
    //==========================================================================
    //==========================================================================
    public function Render()
    {
        //ksort($this->pixel_buffer);
        foreach ($this->pixel_buffer as $pixel) {
            $this->led_strip->Fill([
                'color' => $pixel['color'],
                'start' => $pixel['pos'],
                'len' => 1
            ]);
        }
        $this->led_strip->Render();
    }

}
