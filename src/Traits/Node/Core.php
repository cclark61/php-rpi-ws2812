<?php
//*****************************************************************************
//*****************************************************************************
/**
 * WS2812 Node Core Trait
 *
 * @package         Cclark61\RPi\WS2812
 * @subpackage      Traits\Node
 * @author          Christian J. Clark
 * @copyright       Christian J. Clark
 * @link            https://github.com/cclark61/php-rpi-ws2812
 **/
//*****************************************************************************
//*****************************************************************************

namespace Cclark61\RPi\WS2812\Traits\Node;

trait Core
{
    //=========================================================================
    // Traits
    //=========================================================================
    use \phpOpenFW\Traits\Opts;

    //=========================================================================
    // Class Members
    //=========================================================================
    protected static $color_components = 'RGBWL';
    protected $config = false;
    protected $node_socket = false;
    protected $gpionum = false;
    protected $chip_type = false;
    protected $channel = false;
    protected $led_count = false;
    protected $brightness = 255;

    //=========================================================================
    //=========================================================================
    // Constructor
    //=========================================================================
    //=========================================================================
    public function __construct($args='default', Array $opts=[])
    {
        //---------------------------------------------------------------------
        // Get Configuration
        //---------------------------------------------------------------------
        $this->config = static::GetConfig($args);
        if (!$this->config) {
            die("[!!] Invalid node configurarion.\n");
        }

        //---------------------------------------------------------------------
        // Initiate Node
        //---------------------------------------------------------------------
        $this->InitiateNode($this->config, $opts);
    }

    //==========================================================================
    //==========================================================================
    // Get Instance Method
    //==========================================================================
    //==========================================================================
    public static function Instance($args='default')
    {
        return new static($args);
    }

    //=========================================================================
    //=========================================================================
    // Destructor
    //=========================================================================
    //=========================================================================
    public function __destruct()
    {
        //---------------------------------------------------------------------
        // Clear (Turn Off LEDs)
        //---------------------------------------------------------------------
        $this->Clear();

        //---------------------------------------------------------------------
        // Close Socket
        //---------------------------------------------------------------------
        if ($this->node_socket) {
            fclose($this->node_socket);
        }
    }

    //=========================================================================
    //=========================================================================
    // Node Is Valid?
    //=========================================================================
    //=========================================================================
    public function IsValid()
    {
        return ($this->config && $this->node_socket && $this->led_count);
    }

    //=========================================================================
    //=========================================================================
    // Clear Node (Turn Off)
    //=========================================================================
    //=========================================================================
    public function Clear()
    {
        $this->Reset();
        $data = "reset;setup {$this->channel},{$this->led_count};init;fill 1,000000;render;";
        $this->WriteCommand($data);
    }

    //=========================================================================
    //=========================================================================
    // Set Channel
    //=========================================================================
    //=========================================================================
    public function SetChannel(Integer $channel)
    {
        $this->channel = $channel;
    }

    //=========================================================================
    //=========================================================================
    // Set Number LEDS
    //=========================================================================
    //=========================================================================
    public function SetLEDCount(Integer $led_count)
    {
        $this->led_count = $led_count;
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Setup / Initialization Command Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //=========================================================================
    //=========================================================================
    // Reset
    //=========================================================================
    //=========================================================================
    public function Reset()
    {
        $this->WriteCommand('reset;');
    }

    //=========================================================================
    //=========================================================================
    // Setup
    //=========================================================================
    //=========================================================================
    public function Setup(Array $args=[])
    {
        $channel = $this->channel;
        $led_count = $this->led_count;
        $invert = 0;
        $global_brightness = 255;
        $led_type = 3;
        $gpionum = $this->gpionum;
        extract($args);

        //---------------------------------------------------------------------
        // WS2812
        //---------------------------------------------------------------------
        if ($this->chip_type == 'ws2812' || $this->chip_type == 'sk6812') {
            $cmd = "setup {$channel},{$led_count},{$led_type},{$invert},{$global_brightness},{$gpionum};";
            $this->WriteCommand($cmd);
            return true;
        }
        //---------------------------------------------------------------------
        // SK9822
        //---------------------------------------------------------------------
        else if ($this->chip_type == 'sk9822') {
            // To Do...
        }

        //---------------------------------------------------------------------
        // Setup Failed
        //---------------------------------------------------------------------
        return false;
    }

    //=========================================================================
    //=========================================================================
    // Init
    //=========================================================================
    //=========================================================================
    public function Init()
    {
        $this->WriteCommand('init;');
    }

    //=========================================================================
    //=========================================================================
    // Render
    //=========================================================================
    //=========================================================================
    public function Render(Array $args=[])
    {
        $delay = 0;
        $write_buffer = true;
        extract($args);
        $cmd = 'render;';
        if ($delay) {
            $cmd = "delay {$delay};{$cmd}";
        }
        $this->WriteCommand($cmd, $write_buffer);
    }

    //=========================================================================
    //=========================================================================
    // Delay
    //=========================================================================
    //=========================================================================
    public function Delay($delay)
    {
        $this->WriteCommand("delay {$delay};");
    }

    //=========================================================================
    //=========================================================================
    // Brightness
    //=========================================================================
    //=========================================================================
    public function Brightness($args)
    {
        if (is_integer($args)) {
            $args = ['brightness' => $args];
        }
        if (!is_array($args)) {
            print "\n[!!] Invalid brightness arguments. Array or integer expected.";
        }
        if (is_array($args)) {
            extract($this->DefaultCommandArgs($args));
        }
        if ($brightness < 0 || $brightness > 255) {
            print "\n[!!] Invalid brightness. Valid value range is 0 - 255.";
        }
        $this->brightness = $brightness;
        $this->WriteCommand("brightness {$channel}, {$brightness}, {$start}, {$len};");
    }

    //=========================================================================
    //=========================================================================
    // Reset, Setup, Initialize Method
    //=========================================================================
    //=========================================================================
    public function RSI(Array $args=[])
    {
        $this->Reset($args);
        $this->Setup($args);
        $this->Init($args);
    }

    //=========================================================================
    //=========================================================================
    // Write Command
    //=========================================================================
    //=========================================================================
    public function WriteCommand(String $cmd, $write_buffer=false)
    {
        //---------------------------------------------------------------------
        // Command cannot be empty
        //---------------------------------------------------------------------
        if (!$this->BufferCommand($cmd)) {
            return false;
        }

        //---------------------------------------------------------------------
        // Is Buffering On?
        //---------------------------------------------------------------------
        $buffering = $this->GetOpt('buffering');

        //---------------------------------------------------------------------
        // Write Buffer?
        //---------------------------------------------------------------------
        if ($write_buffer || !$buffering) {
            $this->WriteBuffer();
        }

        //---------------------------------------------------------------------
        // Success
        //---------------------------------------------------------------------
        return true;
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Internal Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //=========================================================================
    //=========================================================================
    // Initiate Node
    //=========================================================================
    //=========================================================================
    protected function InitiateNode(Array $config, Array $opts=[])
    {
        //---------------------------------------------------------------------
        // Open Socket to Node
        //---------------------------------------------------------------------
        $sock = fsockopen($config['host'], $config['port']);
        if (!$sock) {
            die("[!!] Failed to open remote connection to node.\n");
        }
        $this->node_socket = $sock;
        $this->buffer = [];

        //---------------------------------------------------------------------
        // Set class values from config
        //---------------------------------------------------------------------
        $this->gpionum = $config['gpionum'];
        $this->chip_type = $config['chip_type'];
        $this->channel = $config['channel'];
        $this->led_count = $config['led_count'];
        if (isset($config['buffering'])) {
            $buffering = $config['buffering'];
        }
        else {
            $buffering = false;
        }
        if (isset($config['brightness'])) {
            $this->brightness = $config['brightness'];
        }

        //---------------------------------------------------------------------
        // Options
        //---------------------------------------------------------------------
        $this->SetOpt('buffering', $buffering);
        if ($opts) {
            foreach ($opts as $opt_key => $opt_val) {
                $this->SetOpt($opt_key, $opt_val);
            }
        }

        //---------------------------------------------------------------------
        // Reset, Setup, and Init Hardware
        //---------------------------------------------------------------------
        $this->RSI();

        //---------------------------------------------------------------------
        // Return Success
        //---------------------------------------------------------------------
        return true;
    }

    //=========================================================================
    //=========================================================================
    // Default Command Args
    //=========================================================================
    //=========================================================================
    protected function DefaultCommandArgs(Array $args)
    {
        $def_args = [
            'channel' => $this->channel,
            'start' => 0,
            'len' => $this->led_count,
            'brightness' => $this->brightness
        ];
        if ($args) {
            $def_args = array_merge($def_args, $args);
        }
        return $def_args;
    }

}
