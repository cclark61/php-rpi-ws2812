<?php
//*****************************************************************************
//*****************************************************************************
/**
 * WS2812 Node Class
 *
 * @package         Cclark61\RPi\WS2812
 * @author          Christian J. Clark
 * @copyright       Christian J. Clark
 * @link            https://github.com/cclark61/php-rpi-ws2812
 **/
//*****************************************************************************
//*****************************************************************************

namespace Cclark61\RPi\WS2812;

class Node
{
    //=========================================================================
    // Class Members
    //=========================================================================
    protected $config = false;
    protected $node_socket = false;
    protected $chip_type = false;
    protected $channel = false;
    protected $num_leds = false;

    //=========================================================================
    //=========================================================================
    // Constructor
    //=========================================================================
    //=========================================================================
    public function __construct($args='default')
    {
        //---------------------------------------------------------------------
        // Get Configuration
        //---------------------------------------------------------------------
        $this->config = Config\Node::GetConfig($args);
        if (!$this->config) {
            die("[!!] Invalid node configurarion.\n");
        }

        //---------------------------------------------------------------------
        // Initiate Node
        //---------------------------------------------------------------------
        $this->InitiateNode($this->config);
    }

    //=========================================================================
    //=========================================================================
    // Destructor
    //=========================================================================
    //=========================================================================
    public function __destruct()
    {
        //---------------------------------------------------------------------
        // Turn Off LEDs
        //---------------------------------------------------------------------
        $this->ClearNode();

        //---------------------------------------------------------------------
        // Close Socket
        //---------------------------------------------------------------------
        if ($this->node_socket) {
            fclose($this->node_socket);
        }
    }

    //=========================================================================
    //=========================================================================
    // Node Is Valid?
    //=========================================================================
    //=========================================================================
    public function IsValid()
    {
        return ($this->config && $this->node_socket && $this->num_leds);
    }

    //=========================================================================
    //=========================================================================
    // Clear Node (Turn Off)
    //=========================================================================
    //=========================================================================
    public function ClearNode()
    {
        $data = "reset;setup {$this->channel},{$this->num_leds};init;fill 1,000000;render;";
        $this->WriteCommand($data);
    }

    //=========================================================================
    //=========================================================================
    // Set Channel
    //=========================================================================
    //=========================================================================
    public function SetChannel(Integer $channel)
    {
        $this->channel = $channel;
    }

    //=========================================================================
    //=========================================================================
    // Set Number LEDS
    //=========================================================================
    //=========================================================================
    public function SetNumLEDs(Integer $num_leds)
    {
        $this->num_leds = $num_leds;
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Command Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //=========================================================================
    //=========================================================================
    // Reset
    //=========================================================================
    //=========================================================================
    public function Reset()
    {
        $this->WriteCommand('reset;');
    }

    //=========================================================================
    //=========================================================================
    // Setup
    //=========================================================================
    //=========================================================================
    public function Setup(Array $args=[])
    {
        $channel = $this->channel;
        $num_leds = $this->num_leds;
        extract($args);
        $this->WriteCommand("setup {$channel},{$num_leds};");
    }

    //=========================================================================
    //=========================================================================
    // Init
    //=========================================================================
    //=========================================================================
    public function Init()
    {
        $this->WriteCommand('init;');
    }

    //=========================================================================
    //=========================================================================
    // Init
    //=========================================================================
    //=========================================================================
    public function Render()
    {
        $this->WriteCommand('render;');
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Internal Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //=========================================================================
    //=========================================================================
    // Initiate Node
    //=========================================================================
    //=========================================================================
    protected function InitiateNode(Array $config)
    {
        $sock = fsockopen($config['host'], $config['port']);
        if (!$sock) {
            die("[!!] Failed to open remote connection to node.\n");
        }
        $this->node_socket = $sock;
        $this->chip_type = $config['chip_type'];
        $this->channel = $config['channel'];
        $this->num_leds = $config['num_leds'];
        return true;
    }

    //=========================================================================
    //=========================================================================
    // Write Command
    //=========================================================================
    //=========================================================================
    protected function WriteCommand(String $cmd)
    {
        return fwrite($this->node_socket, $cmd);
    }

}
